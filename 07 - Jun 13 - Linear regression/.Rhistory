#A17
poissonreg.ctr = glm(Cases ~ MedianAge + offset(log(Person.years)),data=table[5:8,], family = poisson)
sum(poissonreg.ctr$residuals)
#b0 = -8.66852; b1 = 0.04922
#A17
poissonreg.ctr = glm(Cases ~ MedianAge + offset(log(Person.years)),data=table[5:8,], family = poisson)
as.factor()
factor()
poissonreg.loc.age.square = glm(Cases ~ factor(Loc) * MedianAge +offset(log(Person.years)),data=table1, family = poisson)
poissonreg.loc.age.square
summary(glm(Cases ~ Loc * MedianAge +offset(log(Person.years)),data=table1, family = poisson))
summary(glm(Cases ~ factor(Loc) * MedianAge +offset(log(Person.years)),data=table1, family = poisson))
summary(glm(Cases ~ as.factor(Loc) * MedianAge +offset(log(Person.years)),data=table1, family = poisson))
m_full = glm(Cases ~ factor(Loc) * MedianAge +offset(log(Person.years)),data=table1, family = poisson)
m_rest = glm(Cases ~ factor(Loc) + MedianAge + offset(log(Person.years)),data=table1, family = poisson)
m_rest$deviance-m_full$deviance
1-pchisq(5.8426,1)
summary(fit2)
fit2$$df.null
fit2$df.null
fit2$df.residual
fit2$null.deviance
#A34
#a
##Wald’s tests
library("aod")
wald.test(b = coef(poissonreg.loc.age.inter), Sigma = vcov(poissonreg.loc.age.inter), Terms = 4)
wald.test(b = coef(poissonreg.loc.age.inter), Sigma = vcov(poissonreg.loc.age.inter), Terms = 4)
#A27
poissonreg.loc.age.inter = glm(Cases ~ Loc + MedianAge + (Loc*MedianAge)+offset(log(Person.years)),data=table1, family = poisson)
wald.test(b = coef(poissonreg.loc.age.inter), Sigma = vcov(poissonreg.loc.age.inter), Terms = 4)
anova(fit2)
#b
poissonreg.loc.age.square = glm(Cases ~ Loc + MedianAge + (MedianAge*MedianAge)+offset(log(Person.years)),data=table1, family = poisson)
poissonreg.loc.age.square,poissonreg.loc.age
anova(poissonreg.loc.age.square,poissonreg.loc.age)
poissonreg.loc.age.inter$residuals
##deviance residuals
resid(poissonreg.loc.age.inter)
anova(poissonreg.loc.age.inter)
#b
poissonreg.loc.age.square = glm(Cases ~ Loc + MedianAge + (MedianAge*MedianAge)+offset(log(Person.years)),data=table1, family = poisson)
anova(poissonreg.loc.age.square,poissonreg.loc.age)
fit2$deviance
anova.glm(fit2)
anova(fit2, test="G")
anova(fit2, test="LRT")
anova(anova.glm(), test="LRT")
anova(poissonreg.loc.age.square, test="LRT")
#In K&S Chapter 4, please complete Activities 5, 13, 15, 16, 17, 18.
setwd("/Users/SMC/学/ECE 608/10 - Jul 04 - Design of Experiments")
#Activity 5
table <- read.csv("C4 Popcorn.csv")
table
stripchart(Table$PopRate ~ Table$Brand, vertical = TRUE, method = "jitter", col=c("red","blue","green"))
stripchart(table$PopRate ~ table$Brand, vertical = TRUE, method = "jitter", col=c("red","blue","green"))
group1 <- table[table$Brand == "Fastco" & table&Time == '105 s']
group1 <- table[table$Brand == "Fastco" & table$Time == '105 s']
group1 <- table[table$Brand == "Fastco" & table$Time == '105 s',]
stripchart(table[table$Brand == "Fastco",]$PopRate ~ table[table$Brand == "Fastco",]$Time, vertical = TRUE, method = "jitter", col=c("red","blue","green"))
table
aov(formula = PopRate ~ Time * Brand, data = table)
aov(formula = PopRate ~ Time + Brand + Time:Brand, data = table)
summary(aov(formula = PopRate ~ Time + Brand + Time:Brand, data = table))
#Activity 15
library(ggplot2)
ggplot (table,aes (x = Time, y = PopRate, fill = Brand))  + facet_grid (. ~ Brand) + geom_point()
xyplot(PopRate~Brand:factor(Time1):Microwave)
table
xyplot(table$PopRate~table$Brand:factor(table$Time):table$Microwave)
max(tapply(PopRate, Brand:factor(Time):Microwave, sd))
max(tapply(table$PopRate, table$Brand:factor(table$Time):table$Microwave, sd))
(tapply(table$PopRate, table$Brand:factor(table$Time):table$Microwave, sd))
max(tapply(table$PopRate, table$Brand:factor(table$Time):table$Microwave, sd))/min(tapply(table$PopRate, table$Brand:factor(table$Time):table$Microwave, sd))
m1<- aov(formula = PopRate ~ Brand * Time * Microwave, data = table)
m1<- aov(formula = PopRate ~ Brand * factor(Time) * Microwave, data = table)
summary(m1)
m1<- aov(formula = PopRate ~ Brand + factor(Time) * Microwave, data = table)
m1<- aov(formula = PopRate ~ Brand + Microwave + factor(Time) +factor(Time):Microwave + factor(Time):Brand + Brand:Microwave, data = table)
summary(m1)
qqnorm(m1$residuals)
qqline(m1$residuals)
m2 <- aov(PopRate ~ Time * Brand * Microwave)
attach(table)
m2 <- aov(PopRate ~ Time * Brand * Microwave)
##b.The spread of each group is roughly the same,some shifts could result from small sample size.
# sd(group2$PopRate)/sd(group1$PopRate) = 1.338725 <2, thus no strong evidence against equal variance assumption.
attach(table)
m1 <- aov(PopRate ~ factor(Time) * Brand)
m1 <- aov(PopRate ~ factor(Time) * Brand)
qqnorm(resid(m1))
hist(resid(m1))
qqnorm(m1$residuals)
qqline(m1$residuals)
View(m_rest)
m2<- aov(formula = PopRate ~ Brand + Microwave + factor(Time) +factor(Time):Microwave + factor(Time):Brand + Brand:Microwave, data = table)
summary(m2)
summary(m1)
setwd("/Users/SMC/学/ECE 608/11 - Jul 11 - Analysis of variance")
table <- read.csv("C5 Memory.csv")
##c.
ggplot(table, aes(x = Wordlist, y = Score)) +
geom_point() #individual value plot
ggplot(table, aes(x = Distracter, y = Score)) +
geom_point() #individual value plot
##c.
ggplot(table, aes(x = Wordlist, y = Score)) +
geom_point() #individual value plot
ggplot(table, aes(x = Distracter, y = Score)) +
geom_point() #individual value plot
boxplot(Score ~ reorder(Word.List:Distracter, Score, median), ylab="Avg
Score (Recalled Words out of 20)")
attach(table)
boxplot(Score ~ reorder(Wordlist:Distracter, Score, median), ylab="Avg
Score (Recalled Words out of 20)")
boxplot(Score ~ reorder(Wordlist:Distracter, Score), ylab="Avg
Score (Recalled Words out of 20)")
reorder?
?reorder
?reorder
library(gplots)
library(gplots)
plotmeans(Score ~ Wordlist,xlab="Wordlist",ylab="Score", p=.68, main="Main
effect Plot-Wordlist",barcol="black", table)
##Interaction plot
with(table, interaction.plot(x.factor = Wordlist, trace.factor = Distracter, response = Score))
boxplot(Score ~ reorder(Wordlist:Distracter, Score, median), ylab="AvgScore (Recalled Words out of 20)")
##Interaction plot
with(table, interaction.plot(x.factor = Wordlist, trace.factor = Distracter, response = Score))
table
##Interaction plot
with(table, interaction.plot(x.factor = Wordlist, trace.factor = Distracter, response = Score))
##Interaction plot
with(table, interaction.plot(x.factor = Wordlist, trace.factor = Distracter, response = Test))
Score
#redo
plot(c(1:2),seq(7,9,length=2),xaxt="n",type="n",xlab="Word List",
ylab="Mean Number of Words Recalled")
axis(1,at=c(1:2),labels=c("Abstract","Concrete"))
points(c(1:2),tapply(Score, Word.List, mean))
points(c(1:2),tapply(Score, Wordlist, mean))
lines(c(1:2),tapply(Score, Word.List, mean))
lines(c(1:2),tapply(Score, Wordlist, mean))
library(gplots)
plotmeans(Score ~ Wordlist,xlab="Wordlist",ylab="Score", p=.68, main="Main
effect Plot-Wordlist",barcol="black", table)
plotmeans(Score ~ Distracter,xlab="Distracter",ylab="Score", p=.68, main="Main
effect Plot-Distracter",barcol="black", table)
plotmeans(Score ~ Distracter,xlab="Distracter",ylab="Score", p=.68, main="Main
effect Plot-Distracter",barcol="black", table)
##Interaction plot
with(table, interaction.plot(x.factor = Wordlist, trace.factor = Distracter, response = Score))
#No, from the boxplot the box-widths in a boxplot they're mostly within a factor of ~2 of each other,
#so we can't question the equal variance assumption.
m1<-aov(Score ~ Wordlist * Distracter, table)
hist(resid(m1))
qqnorm(m1$residuals)
qqline(m1$residuals)
#No, from the boxplot the box-widths in a boxplot they're mostly within a factor of ~2 of each other,
#so we can't question the equal variance assumption.
m1<-aov(Score ~ Wordlist * Distracter, table)
hist(resid(m1))
qqnorm(m1$residuals)
qqline(m1$residuals)
summary(m1)
#Activity 2
##a. TBD double check ??
summary(aov(formula = Score ~ Wordlist * Distracter+factor(Student), data=table))
#Activity 2
##a. TBD double check ??
summary(aov(formula = Score ~ Wordlist * Distracter+factor(Student), data=table))
block <- aov(Score ~ as.factor(Student) + Word.List*Distracter)
summary(aov(formula = Score ~ Wordlist * Distracter+Student, data=table))
summary(aov(formula = Score ~ Wordlist * Distracter*factor(Student), data=table))
#Activity 2
##a. TBD double check ??
summary(aov(formula = Score ~ Wordlist * Distracter+factor(Student), data=table))
#The P value for student is 0.296 > 0.05  indicates weak evidence against the null hypothesis,
#so failed to reject the null hypothesis. Student variability shouldn't be the major cause of variability of data.
##c
plotmeans(Score ~ Student,xlab="Student",ylab="Score", p=.95, main="Main
effect Plot-Student",barcol="black", table)
#The P value for student is 0.296 > 0.05  indicates weak evidence against the null hypothesis,
#so failed to reject the null hypothesis. Student variability shouldn't be the major cause of variability of data.
##c
plotmeans(Score ~ factor(Student),xlab="Student",ylab="Score", p=.95, main="Main
effect Plot-Student",barcol="black", table)
=
#Activity 2
##a. TBD double check ??
summary(aov(formula = Score ~ Wordlist * Distracter+factor(Student), data=table))
summarise()
plotmeans(Score ~ Wordlist,xlab="Wordlist",ylab="Score", p=.95, main="Main
effect Plot-Wordlist",barcol="black", table)
plotmeans(Score ~ Distracter,xlab="Distracter",ylab="Score", p=.95, main="Main
effect Plot-Distracter",barcol="black", table)
#A smaller P-value corresponds to a larger effect on the main effect plot.
m2<-lm(Score ~ Wordlist * Distracter+Student, table)
hist(resid(m2))
#A smaller P-value corresponds to a larger effect on the main effect plot.
m2<-aov(Score ~ Wordlist * Distracter+factor(Student), table)
hist(resid(m2))
qqnorm(resid(m2))
qqline(resid(m2))
qqnorm(resid(m2))
qqline(resid(m2))
splitplot <- aov(Score ~ Major + Wordlist*Distracter + Error(Major/as.factor(Student2)))
table
splitplot
table
summary(splitplot)
Major/as.factor(Student2)
splitplot <- aov(Score ~ Major + Wordlist*Distracter + Error(as.factor(Student2)))
summary(splitplot)
splitplot2 <- aov(Score ~ Major + Wordlist + Distracter+  Wordlist*Distracter + Major*Wordlist+ Major*Distracter +Error(Major/as.factor(Student2)))
summary(splitplot2)
splitplot2 <- aov(Score ~ Major + Wordlist + Distracter+  Wordlist:Distracter + Major:Wordlist+ Major:Distracter +Error(Major/as.factor(Student2)))
summary(splitplot2)
setwd("/Users/SMC/学/ECE 608/kuiper_txt_data")
chocolate <- read.table("MeltingChipsJS.txt",header=TRUE))
chocolate <- read.table("MeltingChipsJS.txt",header=TRUE)
chocolate <- read.table("C9 MeltingChipsJS.txt",header=TRUE)
chocolate
KM.obj <- survfit(Surv(Time,Censor)~Type,data=meltchips)
KM.obj <- survfit(Surv(Time,Censor)~Type,data=chocolate)
plot(KM.obj,lty=1:2,xlab="Time",ylab="Survival Probability",ylim=c(0,1))
legend("topleft", # places a legend at the appropriate place
c(chocolate$Type), # puts text in the legend
lty=c(1,2), # gives the legend appropriate symbols (lines)
lwd=c(1,1), # width
# col=c("blue","red"),
cex=0.5)  # scale
legend("topleft", # places a legend at the appropriate place
c(chocolate$Type), # puts text in the legend
lty=c(1,2), # gives the legend appropriate symbols (lines)
lwd=c(1,1), # width
# col=c("blue","red"),
cex=0.5)  # scale
legend("topleft", # places a legend at the appropriate place
c("milk","white"), # puts text in the legend
lty=c(1,2), # gives the legend appropriate symbols (lines)
lwd=c(1,1), # width
# col=c("blue","red"),
cex=0.5)  # scale
legend("bottomleft", # places a legend at the appropriate place
c("milk","white"), # puts text in the legend
lty=c(1,2), # gives the legend appropriate symbols (lines)
lwd=c(1,1), # width
# col=c("blue","red"),
cex=0.5)  # scale
plot(KM.obj,lty=1:2,xlab="Time",ylab="Survival Probability",ylim=c(0,1))
legend("bottomleft", # places a legend at the appropriate place
c("milk","white"), # puts text in the legend
lty=c(1,2), # gives the legend appropriate symbols (lines)
lwd=c(1,1), # width
# col=c("blue","red"),
cex=0.5)  # scale
print(KM.obj,print.rmean=TRUE,rmean="individual")
print(KM.obj)
KM.obj <- survfit(Surv(Time,Censor)~Type,data=chocolate, conf.type="plain")
plot(KM.obj,lty=1:2,xlab="Time",ylab="Survival Probability",ylim=c(0,1))
plot(KM.obj,lty=1:2,xlab="Time",ylab="Survival Probability",ylim=c(0,1),
conf.int=TRUE)
plot(KM.obj,lty=1:2,col = c("red","blue")xlab="Time",ylab="Survival Probability",ylim=c(0,1),
conf.int=TRUE)
plot(KM.obj,lty=1:2,col = c("red","blue"),xlab="Time",ylab="Survival Probability",ylim=c(0,1),
conf.int=TRUE)
KM.obj <- survfit(Surv(Time,Censor)~Type,data=chocolate)
plot(KM.obj,lty=1:2,col = c("red","blue"),xlab="Time",ylab="Survival Probability",ylim=c(0,1),
conf.int=TRUE)
KM.obj <- survfit(Surv(Time,Censor)~Type,data=chocolate)
plot(KM.obj,lty=1:2,col = c("red","blue"),xlab="Time",ylab="Survival Probability",ylim=c(0,1),
conf.int=TRUE)
KM.obj <- survfit(Surv(Time,Censor)~Type=="Milk",data=chocolate,conf.type="plain")
plot(KM.obj,lty=1:2,col = c("red","blue"),xlab="Time",ylab="Survival Probability",ylim=c(0,1),
conf.int=TRUE)
KM.obj <- survfit(Surv(Time,Censor)~Type=="Milk",data=chocolate,conf.type="plain")
plot(KM.obj,lty=1:2,col = c("red","blue"),xlab="Time",ylab="Survival Probability",ylim=c(0,1),
conf.int=TRUE)
?survfit
summary(KM.obj)
milkchips <- meltchips[chocolate$Type=="Milk",]
KM.obj <- survfit(Surv(Time,Censor)~Type,data=milkchips,conf.type="plain")
milkchips <- chocolate[chocolate$Type=="Milk",]
KM.obj <- survfit(Surv(Time,Censor)~Type,data=milkchips,conf.type="plain")
plot(KM.obj,lty=1:2,col = xlab="Time",ylab="Survival Probability",ylim=c(0,1),
conf.int=TRUE)
plot(KM.obj,lty=1:2,col = xlab="Time",ylab="Survival Probability",ylim=c(0,1),conf.int=TRUE)
plot(KM.obj,lty=1,col = xlab="Time",ylab="Survival Probability",ylim=c(0,1),conf.int=TRUE)
plot(KM.obj,lty=1:2,col = xlab="Time",ylab="Survival Probability",ylim=c(0,1),
conf.int=TRUE)
plot(KM.obj,lty=1:2,xlab="Time",ylab="Survival Probability",ylim=c(0,1),
conf.int=TRUE)
plot(KM.obj,lty=1,xlab="Time",ylab="Survival Probability",ylim=c(0,1),conf.int=TRUE)
milkchips <- chocolate[chocolate$Type=="Milk",]
KM.obj <- survfit(Surv(Time,Censor)~Type,data=milkchips,conf.type="plain")
plot(KM.obj,lty=1,xlab="Time",ylab="Survival Probability",ylim=c(0,1),conf.int=TRUE)
legend("bottomleft", # places a legend at the appropriate place
c("milk","white"), # puts text in the legend
lty=c(1,2), # gives the legend appropriate symbols (lines)
lwd=c(1,1), # width
# col=c("blue","red"),
cex=0.5)  # scale
milkchips <- chocolate[chocolate$Type=="Milk",]
KM.obj <- survfit(Surv(Time,Censor)~Type,data=milkchips,conf.type="plain")
plot(KM.obj,lty=1,xlab="Time",ylab="Survival Probability",ylim=c(0,1),conf.int=TRUE)
legend("bottomleft", # places a legend at the appropriate place
c("milk"), # puts text in the legend
lty=c(1), # gives the legend appropriate symbols (lines)
lwd=c(1,1), # width
# col=c("blue","red"),
cex=0.5)  # scale
plot(KM.obj,lty=1,xlab="Time",ylab="Survival Probability",ylim=c(0,1),conf.int=TRUE)
legend("bottomleft", # places a legend at the appropriate place
c("milk"), # puts text in the legend
lty=c(1), # gives the legend appropriate symbols (lines)
lwd=c(1,1), # width
# col=c("blue","red"),
cex=0.5)  # scale
plot(KM.obj,lty=1,xlab="Time",ylab="Survival Probability",ylim=c(0,1),conf.int=TRUE)
legend("bottomleft", # places a legend at the appropriate place
c("milk","confidence interval"), # puts text in the legend
lty=c(1), # gives the legend appropriate symbols (lines)
lwd=c(1,1), # width
# col=c("blue","red"),
cex=0.5)  # scale
KM.obj <- survfit(Surv(Time,Censor)~Type,data=milkchips,conf.type="plain")
plot(KM.obj,lty=1,xlab="Time",ylab="Survival Probability",ylim=c(0,1),conf.int=TRUE)
legend("bottomleft", # places a legend at the appropriate place
c("milk","confidence interval"), # puts text in the legend
lty=c(1, 2), # gives the legend appropriate symbols (lines)
lwd=c(1,1), # width
# col=c("blue","red"),
cex=0.5)  # scale
summary()
#milkchips <- chocolate[chocolate$Type=="Milk",]
KM.obj <- survfit(Surv(Time,Censor)~Type,data=milkchips,conf.type="plain")
plot(KM.obj,lty=1,xlab="Time",ylab="Survival Probability",ylim=c(0,1),conf.int=TRUE)
#milkchips <- chocolate[chocolate$Type=="Milk",]
KM.obj <- survfit(Surv(Time,Censor)~Type,data=chocolate,conf.type="plain")
plot(KM.obj,lty=1,xlab="Time",ylab="Survival Probability",ylim=c(0,1),conf.int=TRUE)
legend("bottomleft", # places a legend at the appropriate place
c("milk","white"), # puts text in the legend
lty=c(1, 2), # gives the legend appropriate symbolsummary()s (lines)
lwd=c(1,1), # width
col=c("blue","red"),
cex=0.5)  # scale
plot(KM.obj,lty=1,xlab="Time",ylab="Survival Probability",ylim=c(0,1),conf.int=TRUE)
legend("bottomleft", # places a legend at the appropriate place
c("milk","white"), # puts text in the legend
lty=c(1, 2), # gives the legend appropriate symbolsummary()s (lines)
lwd=c(1,1), # width
col=c("blue","red"),
cex=0.5)  # scale
plot(KM.obj,lty=1,xlab="Time", lty=c(1, 2),col=c("blue","red") ,ylab="Survival Probability",ylim=c(0,1),conf.int=TRUE)
plot(KM.obj,lty=1,xlab="Time", lty=1:2,col=c("blue","red") ,ylab="Survival Probability",ylim=c(0,1),conf.int=TRUE)
plot(KM.obj,lty=1:2,xlab="Time",ylab="Survival Probability",ylim=c(0,1),conf.int=TRUE)
plot(KM.obj,lty=1:2,col=c("blue","red"),xlab="Time",ylab="Survival Probability",ylim=c(0,1),conf.int=TRUE)
legend("bottomleft", # places a legend at the appropriate place
c("milk","white"), # puts text in the legend
lty=c(1, 2), # gives the legend appropriate symbolsummary()s (lines)
lwd=c(1,1), # width
col=c("blue","red"),
cex=0.5)  # scale
chocolate
survdiff(Surv(Time,Censor)~Type,data=meltchips)
survdiff(Surv(Time,Censor)~Type,chocolate)
chocolate
Surv(Time,Censor)
Surv(Time,chocolate$Censor)
Surv(chocolate$Time,chocolate$Censor)
cph.model <- survival::coxph( Surv(Time,Censor)~Type,data=chocolate )
print( cph.model )
cph.test <- survival::cox.zph( cph.model )
cph.test <- survival::cox.zph( cph.model )
print( cph.test )
plot( cph.test )
#milkchips <- chocolate[chocolate$Type=="Milk",]
KM.obj <- survfit(Surv(Time,Censor)~Type,data=chocolate,conf.type="plain")
plot(KM.obj,lty=1:2,col=c("blue","red"),xlab="Time",ylab="Survival Probability",ylim=c(0,1),conf.int=TRUE)
#milkchips <- chocolate[chocolate$Type=="Milk",]
KM.obj <- survfit(Surv(Time,Censor)~Type,data=chocolate,conf.type="plain", censor= FALSE)
#milkchips <- chocolate[chocolate$Type=="Milk",]
KM.obj <- survfit(Surv(Time,Censor)~Type,data=chocolate, censor=TRUE,conf.type="plain")
?surv_fit
#milkchips <- chocolate[chocolate$Type=="Milk",]
KM.obj <- survfit(Surv(Time,Censor)~Type,data=chocolate, conf.type="plain")
plot(KM.obj,lty=1:2,col=c("blue","red"),xlab="Time",ylab="Survival Probability",ylim=c(0,1),conf.int=TRUE)
legend("bottomleft", # places a legend at the appropriate place
c("milk","white"), # puts text in the legend
lty=c(1, 2), # gives the legend appropriate symbolsummary()s (lines)
lwd=c(1,1), # width
col=c("blue","red"),
cex=0.5)  # scale
setwd("/Users/SMC/学/ECE 608/For Students/2017 Final exam")
read.csv("/q1/hers.csv")
read.csv("q1/hers.csv")
data.q1<-read.csv("q1/hers.csv")$
setwd("/Users/SMC/学/ECE 608/For Students/2017 Final exam")
setwd("/Users/SMC/学/ECE 608/For Students/2017 Final exam")
data.q1<-read.csv("q1/hers.csv")
no.diabetes <- data.q1$diabetes
no.diabetes
no.diabetes <- data.q1[data.q1$diabetes=="no",]
no.diabetes
no.diabetes$diabetes
count(no.diabetes)
nrow(no.diabetes)
model.a <-lm(no.diabetes$glucose ~ no.diabetes$exercise)
plot(model.a)
model.a <-lm(no.diabetes$glucose ~ no.diabetes$exercise)
plot(no.diabetes$glucose ~ no.diabetes$exercise)
scatter(no.diabetes$glucose ~ no.diabetes$exercise)
attach(car.csv)
plot(Mileage, Residual, data=car.csv, main="Residuals vs Mileage Least Mean Square Regression",
xlab="Mileage", ylab="Residual ", pch=16, type = "p", cex = 0.5) +
abline(h = 0)
plot(no.diabetes$glucose,no.diabetes$exercise)
plot(no.diabetes$exercise, no.diabetes$glucose)
?plot
plot(no.diabetes$exercise, no.diabetes$glucose)
scatterplot(no.diabetes$exercise, no.diabetes$glucose)
plot
abline(model.a$coefficients)
xyplot( glucose ~ exercise, data=no.diabetes, main="")
xyplot( glucose ~ exercise, data=no.diabetes, main="")
abline(model.a$coefficients)
xyplot( glucose ~ exercise, data=no.diabetes, main="")
abline(model.a$coefficients)
require(mosaic)
xyplot( glucose ~ exercise, data=no.diabetes, main="")
abline(model.a$coefficients)
plot(x= no.diabetes$exercise, y=no.diabetes$glucose)
abline(model.a$coefficients)
plot(x= no.diabetes$exercise, y=no.diabetes$glucose, xlab="exercise", type ="p")
plot(x= no.diabetes$exercise, y=no.diabetes$glucose, xlab="exercise", type ="p")
abline(model.a$coefficients)
plot(x= no.diabetes$exercise, y=no.diabetes$glucose, xlab="exercise", type ="p", cex=0.5)
plot(x= no.diabetes$exercise, y=no.diabetes$glucose, xlab="exercise", type ="p", pch=16)
attach(car.csv)
## Activity 1
setwd("/Users/SMC/学/ECE 608/07 - Jun 13 - Linear regression")
car.csv <- read.csv("C3 Cars.csv")
attach(car.csv)
## Activity 1
setwd("/Users/SMC/学/ECE 608/07 - Jun 13 - Linear regression")
car.csv <- read.csv("C3 Cars.csv")
attach(car.csv)
#cor(Mileage,Price)
fit <- lm(Price ~ Mileage)
plot(car.csv$Mileage, car.csv$Price, data=car.csv, main="Mileage vs Price Least Mean Square Regression",
xlab="Mileage", ylab="Price ", pch=16, type = "p", cex = 0.5) +
abline(fit$coefficients, col="red")
plot(numeric(no.diabetes$exercise), no.diabetes$glucose, xlab="exercise", type ="p", pch=16)
plot(as.numeric(no.diabetes$exercise), no.diabetes$glucose, xlab="exercise", type ="p", pch=16)
abline(model.a$coefficients)
plot(no.diabetes$exercise, no.diabetes$glucose, xlab="exercise", type ="p", pch=16)
abline(model.a$coefficients)
summary(model.a)
##Activity 4
full.model= lm(Price~Cyl+Liter+Doors+Cruise+Sound+Leather+Mileage, data =car.csv)
step.model <- step(full.model)
summary(step.model)
##Activity 5
Cars <- car.csv
require(leaps)
full.data=cbind(Cars$Mileage,Cars$Cyl,Cars$Liter,Cars$Doors,Cars$Cruise,Cars$Sound,Cars$Leather)
head(full.data)
best.lm <- leaps(full.data,Cars$Price, method = "adjr2", names =c('Mileage','Cyl','Liter','Doors','Cruise','Sound','Leather'), nbest=3)
data1 = cbind(best.lm$which,best.lm$adjr2)
summary(data1)
data1
?leaps
best.lm <- leaps(full.data,Cars$Price, method = "adjr2", names =c('Mileage','Cyl','Liter','Doors','Cruise','Sound','Leather'), nbest=4)
data1 = cbind(best.lm$which,best.lm$adjr2)
data1
summary(best.lm)
best.lm
data1
##Activity 4
full.model= lm(Price~Cyl+Liter+Doors+Cruise+Sound+Leather+Mileage, data =car.csv)
##Activity 4
full.model= lm(Price~Cyl+Liter+Doors+Cruise+Sound+Leather+Mileage, data =car.csv)
step.model <- step(full.model)
summary(step.model)
##Activity 5
Cars <- car.csv
require(leaps)
full.data=cbind(Cars$Mileage,Cars$Cyl,Cars$Liter,Cars$Doors,Cars$Cruise,Cars$Sound,Cars$Leather)
head(full.data)
best.lm <- leaps(full.data,Cars$Price, method = "adjr2", names =c('Mileage','Cyl','Liter','Doors','Cruise','Sound','Leather'), nbest=4)
data1 = cbind(best.lm$which,best.lm$adjr2)
data()
data1
##Activity 4
full.model= lm(Price~Cyl+Liter+Doors+Cruise+Sound+Leather+Mileage, data =car.csv)
##Activity 4
full.model= lm(Price~Cyl+Liter+Doors+Cruise+Sound+Leather+Mileage, data =car.csv)
step.model <- step(full.model)
summary(step.model)
#b
data2<- no.diabetes[no.diabetes$drinkany!="" & !is.na(no.diabetes$BMI) ]
#b
data2<- no.diabetes[no.diabetes$drinkany!="" & !is.na(no.diabetes$BMI) ]
#b
data2<- no.diabetes[no.diabetes$drinkany!="") ]
#b
data2<- no.diabetes[no.diabetes$drinkany!="" ]
#b
data2<- no.diabetes[no.diabetes$drinkany!="" & !is.na(no.diabetes$BMI), ]
model.a <-lm(glucose ~ exercise+age+drinkany+BMI, data=data2)
summary(model.a)
